#!/usr/bin/env python3

import os
import sys

#runPath = os.getcwd() #radni direktorij
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, "..")) #dodaj parent dir u PATH varijablu

from redis import exceptions as redisExceptions

from lib.Config import Configuration
from lib.Toolkit import pad
import lib.DatabaseLayer as data #cve-search lib za rad s bazom


from pymongo import MongoClient

client = MongoClient()
client = MongoClient('localhost', 27017) #client = MongoClient('mongodb://localhost:27017/')

db = client.users
collection = db.notification

#print(db.collection_names(include_system_collections=False))

# post={"mail":"ha@gmail.com",
# "choice":[{"vendor":"2rv","product":"dr._sheikh_adnan_ibrahim"}]} #{"vendor":"altitude","product":"altitude_unified_customer_interaction", "version":"7.5","cvss"="4.3"}
# post_id = collection.insert_one(post).inserted_id


########################################

def getInfo(mail):  #pronadi usera(mail)
  return collection.find_one({"mail": mail},{"mail":1,"choice.version":1,"choice.product":1, "choice.vendor":1,"_id":0})


def getInfoVendor(vendorname, productname,version):  #pronadi usera(mail)
  return collection.find({"choice.vendor": vendorname,"choice.product": productname,"choice.version": version},{"mail":1,"_id":0})#,"choice":1}) #maknut choice/samo check


def search4Mail(vendorname, productname=None, version=None):##check scenarije,vrati mailove
	#print(vendorname,productname,version)
	rez=[]
	if not collection.find_one({"choice": {"$elemMatch": {"vendor":vendorname,"product":productname,"version":version }}}):
		
		return None
		#return 0
		
	else:
		li=getInfoVendor(vendorname, productname,version)
		
		for i in li:
			rez.append(i)
		return(rez)
	



#print(search4Mail("matt_wright","formhandler.cgi"))


#print(search4Mail("3par"))#,"3.0"))


#compare("ibm","sterling_file_gateway","2.2")

"""{'_id': ObjectId('5a28f8510ddb7d94cb0ee389'), 'choice': [{'version': None, 'product': 'pro3', 'vendor': '3par'}, {'vendor': '1kxun'}, 
{'version': None, 'product': 'pro2', 'vendor': '3par'}, {'version': 'ver', 'product': 'pro', 'vendor': 'ven3'}, {'version': 'ver1', 'product': 'pro1', 'vendor': '3par'}, 
{'version': 'ver2', 'product': 'pro1', 'vendor': '3par'}, {'version': None, 'product': None, 'vendor': '3par'}], 'mail': 'veddundek@gmail.com'}
"""


######################################
#stats
def getNumberofVendors(mail):
	x=getInfo(mail)
	return(len(list(filter(lambda x: x.get('vendor') , x["choice"]))))

def getNumberofProducts(mail): #ne cita null
	x=getInfo(mail)
	return(len(list(filter(lambda x: x.get('product') , x["choice"]))))

def getNumberofVersions(mail):
	x=getInfo(mail)
	return(len(list(filter(lambda x: x.get('version') , x["choice"]))))

def getNumberofRVendors(mail, vendorname):
	x=getInfo(mail)
	return(len(list(filter(lambda x: x.get('vendor')==vendorname , x["choice"]))))

#print(getNumberofProducts("aa@gm.com"))

#print(getNumberofRVendors("veddundek@gmail.com", "3par"))

######################################

######################################


def removeMail(mail):

	collection.remove({"mail":mail})

#removeMail("marijo.plepelic@carnet.hr")


def removeVendor(mail, vendor, product=None, version=None): #remove unos s odredenim vendorom
	collection.update({'mail':mail},{"$pull": {"choice":{"vendor":vendor}}})

# removeVendor("veddundek@gmail.com","linux")
# removeVendor("veddundek@gmail.com","pivotal_software")
# removeVendor("vdundek@carnet.hr","pivotal_software")


#########################################




#collection.update({'mail': "aa@gmail.com","choice": {"$elemMatch": {"vendor":"ven2" }}}, {"$set": {"choice.$.vendor": "ven"}})


def updateNotifproduct(mail, vendor, product=None, version=None): #postoji mail i vendor i product i nadodaje se verzija
  # collection.update({'mail': mail}, {'$addToSet': {'choice':[{"version":version, "product":product,"vendor" :vendor}]}})
  collection.update({'mail': mail, "choice":  [{"vendor":vendor, "product":product}]}, {'$addToSet': {'choice': [{"version":version}]}})

#updateNotifproduct("ab@gm.com","ven","pro","s")



def updateNotifvendor(mail, vendor, product=None, version=None): #postoji mail i vendor nadodaje se product i vendor
  # collection.update({'mail': mail}, {'$addToSet': {'choice':[{"version":version, "product":product,"vendor" :vendor}]}})
  collection.update({'mail': mail, "choice":[{"vendor":vendor}]}, {'$addToSet': {'choice': {"$each": [{"product":product,"vendor" :vendor}]}}})

#updateNotifvendor("aa@gm.com","ven","pr")



def updateNotif(mail, vendor, product=None, version=None): #update user info
  # collection.update({'mail': mail}, {'$addToSet': {'choice':[{"version":version, "product":product,"vendor" :vendor}]}})
  collection.update({'mail': mail}, {'$addToSet': {'choice': {"$each": [{"version":version, "product":product,"vendor" :vendor}]}}})


#updateNotif("hrvoje@hrvoje.hr", "microsoft","windows10","v","123232",False)

##add and update users
def addNotif(mail, vendor,product=None, version=None): #dodavanje usera s odabirom
 
  entry = {'choice':[{"vendor":vendor,"product":product,"version":version}],'mail':mail}

  collection.insert(entry)


#addNotif("aag@gm.com", "ven1") #$addToSet #each https://docs.mongodb.com/manual/reference/operator/update/each/


def updateNotifsetp(mail, vendor, product, version=None): #update verztije po vendoru, productu
  collection.update({'mail': mail,"choice": {"$elemMatch": {"vendor":vendor,"product":product }}}, {"$set": {"choice.$.version": version}})


#updateNotifsetp("aa@gm.com","ven","pro","ver")

def updateNotifsetv(mail, vendor, product=None, version=None): #update producta po vendoru
  collection.update({'mail': mail,"choice": {"$elemMatch": {"vendor":vendor}}}, {"$set": {"choice.$.product": product}})


#updateNotifsetp("aa@gm.com","ven","pro","ver")

#collection.update({"mail":"ae@gm.com","choice":{"$elemMatch": {"vendor":"ven","$or":[{"product":"pro"},{"product":None}] }}}, {"$set": {"choice.$.version": "ver"}}  )



def addMail(mail,vendor,product=None,version=None):#dodavanje korisnika/vpv komb u user bazu
	
		if not collection.find_one({"mail":mail}):
			addNotif(mail, vendor, product, version)
			print("kreira novog usera")
		elif not collection.find_one({"mail":mail}) or getNumberofVendors(mail)>=10:
			print("no more,max ")
		else:
			if collection.find_one({"mail":mail,"choice": {"$elemMatch": {"vendor":vendor,"product":product,"version":version }}}):
				print("no duplicate VPV")
			elif collection.find_one({"mail":mail,"choice": {"$elemMatch": {"vendor":vendor,"product":product }}}):

				if collection.find_one({"mail":mail,"choice": {"$elemMatch": {"vendor":vendor,"product":product,"version":None }}}):

					updateNotifsetp(mail, vendor, product, version)
					print("update none od verzije")


				else:
					updateNotif(mail, vendor, product, version)
					print("create new s drugom verzijom")
			elif collection.find_one({"mail":mail,"choice": {"$elemMatch": {"vendor":vendor}}}):

				if collection.find_one({"mail":mail,"choice": {"$elemMatch": {"vendor":vendor,"product":None }}}):
					updateNotifsetv(mail, vendor, product, version)
					print("update none od producta")


				else:
					print("create new s drugim proizvodom")
					updateNotif(mail, vendor, product, version)
			else:
				updateNotif(mail, vendor, product, version)
				print("stvori novog vendora pod postojecim mailom")
	
# addMail("vdundek@carnet.hr","linux")
#addMail("veddundek@gmail.com","mozilla","firefox")

# addMail("vdundek@cert.hr","cisco")
# addMail("vdundek@cert.hr","microsoft","windows_10")
# addMail("veddundek1@gmail.com","ibm")


#addMail("marijo.plepelic@carnet.hr","apache","struts","2.5.4")
#addMail("danijel.kozinovic@carnet.hr","redhat")

#"qianxun_yingshi"#"1kxun"
#print(db.notifications.find({"choice.vendor":{"$in":["3par"]}}))

#db.notification.find({"mail":"aa@gm.com","choice.$.product":{"$exists":"true"}}).pretty()




###################################################


# def getvendorsfromusers(mail): 
#   info=getInfo(mail)
#   num=getNumberofVendors(mail)
#   rez=[]
#   for i in range(0,num):
#   	rez.append((info["choice"][i]["vendor"]))

#   return rez

def getvendorsfromusers(mail): #vrati vendore koje zeli user, za unsubscribe i guess
  info=getInfo(mail)
  num=getNumberofVendors(mail)
  rez=[]
  for i in range(0,num):
  	rez.append((info["choice"][i]["vendor"]))

  return rez

#print(getvendorsfromusers("vdundek@cert.hr"))


def getInfoVen(mail):  #
  return collection.find({"mail": mail},{"choice.vendor":1,"_id":0})


def checkVendor(mail):#vrati vendore koje zeli user, za unsubscribe i guess
    listvend=[]
    for i in getInfoVen(mail):
        for j in i["choice"]:
            listvend.append(j["vendor"])
    return listvend



# print(getvendorsfromusers("vdundek@cert.hr"))
# print(checkVendor("vdundek@cert.hr"))
