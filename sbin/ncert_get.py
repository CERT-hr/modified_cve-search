#!/usr/bin/env python3
import os
import sys

#runPath = os.getcwd() #radni direktorij
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, "..")) #dodaj parent dir u PATH varijablu

import ast
import sqlite3
import pymongo
import re
import uuid

from lib.Config import Configuration as conf
from redis import exceptions as redisExceptions

from lib.ProgressBar import progressbar
from lib import CVEs
import lib.DatabaseLayer as dba
from lib.Toolkit import pad
from datetime import date, datetime, timedelta

from ncert_db2 import search4Mail as ndb

# Variables
db=conf.getMongoConnection()
colCVE=             db['cves']
colCPE=             db['cpe']

try:
    r = conf.getRedisVendorConnection()
except:
    sys.exit(1)


# Functions
def sanitize(x):
  if type(x)==pymongo.cursor.Cursor:
    x=list(x)
  if type(x)==list:
    for y in x: sanitize(y)
  if x and  "_id" in x: x.pop("_id")
  return x



#print(cvesForCPE("3par"))
"""[{'vulnerable_configuration_cpe_2_2': ['cpe:/a:hp:3par_service_processor_sp:4.2.0.ga-29_%28ga%29_spocc', 'cpe:/a:hp:3par_service_processor_sp:4.3.0.ga-17_%28ga%29_spocc', 
'cpe:/a:hp:3par_service_processor_sp:4.3.0.ga-24_%28mu1%29_spocc'], 'impact': {'integrity': 'NONE', 'confidentiality': 'PARTIAL', 'availability': 'NONE'}, 
'cwe': 'CWE-200', 'vulnerable_configuration': ['cpe:2.3:a:hp:3par_service_processor_sp:4.2.0.ga-29_%28ga%29_spocc', 'cpe:2.3:a:hp:3par_service_processor_sp:4.3.0.ga-17_%28ga%29_spocc', 
'cpe:2.3:a:hp:3par_service_processor_sp:4.3.0.ga-24_%28mu1%29_spocc'], 'Modified': datetime.datetime(2015, 10, 13, 13, 4, 14, 760000), 'cvss': 4.0, 'access': {'complexity': 'LOW', 'authentication': 
'SINGLE_INSTANCE', 'vector': 'NETWORK'}, 'id': 'CVE-2015-5443', 'cvss-time': datetime.datetime(2015, 10, 13, 8, 58, 31, 153000),
 'summary': 'HP 3PAR Service Processor SP 4.2.0.GA-29 (GA) SPOCC, SP 4.3.0.GA-17 (GA) SPOCC, and SP 4.3.0-GA-24 (MU1) SPOCC allows remote authenticated users to obtain sensitive information via unspecified vectors.', 
'references': ['https://h20564.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c04822249'], 'Published': datetime.datetime(2015, 10, 12, 6, 59, 5, 680000)}]"""
#print(cvesForCPE("qianxun_yingshi"))


def getCVE(modif, collection=None): #greater than neka gleda, na kraju onda today-1 day za slanje
  col=colCVE if not collection else db[collection]
  return sanitize(col.find({"last-modified": {'$gt': modif}})) #last-modified  #Published


def getCVEtemp(modif, end, collection=None): #greater than neka gleda, na kraju onda today-1 day za slanje
  col=colCVE if not collection else db[collection]
  return sanitize(col.find({"last-modified": {'$gt': modif, '$lt':end }})) #last-modified  #Published




def toStringFormattedCPE(cpe,autofill=False):
    #cpe=cpe.strip()
    # if not cpe.startswith('cpe:2.3:'):
    #   if not cpe.startswith('cpe:/'): return False
      #cpe=cpe.replace('cpe:/','cpe:2.3:')
    cpe=cpe.replace(':::',':')
    cpe=cpe.replace('::',':')
    cpe=cpe.replace('~~~','')
    cpe=cpe.replace('~~','')
    cpe=cpe.replace('~','')
    cpe=cpe.replace(":-","")
   
    return cpe


def cvesForCPEE(cpe):
  if not cpe: return []
  return sanitize(colCVE.find({"vulnerable_configuration": {"$regex": cpe}}).sort("Modified", -1))

#print(cvesForCPEE("muslim_matrimonial_script_project:muslim_matrimonial_script"))

def getCVEolder(modif, end=None, collection=None):
	rez={}
	summary=[]
	cvss=[]
	vulnerable=[]
	idcve=[]
	cve=getCVE(modif)
	#cve=getCVEtemp(modif,end)
	print(cve)
	for i in cve:
		cvss.append(i["cvss"])
		#print(i["id"])
		summary.append(i["summary"])
		vulnerable.append(i["vulnerable_configuration"])
		idcve.append(i["id"])
	sindex=list(zip(idcve, vulnerable,cvss, summary))	
	fields = ["id","vulnerable",'cvss', 'summary']
	dicts = [dict(zip(fields, d)) for d in sindex] #list of dicts
	#print(len(dicts))
	#print(dicts)
	
	for e in dicts:
		if e["vulnerable"]:
			#print(e["vulnerable"])
			vendors=[]
			products=[]
			versions=[]
			for i in e["vulnerable"]:

				prefix="vulnerable"
				#value=i
				forma=toStringFormattedCPE(i)
				
				#usporedba radi ::
				value=forma
				#print(value)
				if i.count(":")>4:
					value=":".join(value.split(":")[:5])
					x=pad(value.split(":"),5)
					#print(x)
					vendor=x[3]
					
					product=x[4]
					version=x[1]
					#print(vendor, product,version)
					vendors.append(vendor)
					products.append(product)
					versions.append(version)
					#print(vendors,products,versions)
					e["vendor"]=vendors
					e["product"]=products
					e["version"]=versions

					# e["vendor"]=", ".join(str(v) for v in vendors)
					# e["product"]=", ".join(str(k) for k in products)
					# e["version"]=", ".join(str(l) for l in versions)
				
				else:

					x=pad(value.split(":"),6)
					#print(x)
					vendor=x[2]
					product=x[3]
					version=x[4]
					#print(vendor, product,version)

					vendors.append(vendor)
					products.append(product)
					versions.append(version)
					e["vendor"]=vendors
					e["product"]=products
					e["version"]=versions

				# e["vendor"]=", ".join(str(v) for v in vendors)
				# e["product"]=", ".join(str(k) for k in products)
				# e["version"]=", ".join(str(l) for l in versions)
				
				#print(e["vendor"],e["product"],e["version"])
###maknut kad se rijesi valid
			try:#puni redis s novim instancama ak nisu vec tamo hopefully
				r.sadd("v:" + vendor, product)
				if version:
					r.sadd("p:" + product, version)
			except redisExceptions.ConnectionError:
				sys.exit("Redis server not running on %s:%s"%(Configuration.getRedisHost(),Configuration.getRedisPort()))
		else:
			continue
		
		
		try:
			del e["vulnerable"] #e["vulnerable"],
		except KeyError:
			pass
	return dicts



