#!/usr/bin/env python3

import os
import sys

#runPath = os.getcwd() #radni direktorij
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, "..")) #dodaj parent dir u PATH varijablu



from lib.Config import Configuration
from lib.Toolkit import pad
import lib.DatabaseLayer as db #cve-search lib za rad s bazom


#cpe = db.getCPEs()
from redis import exceptions as redisExceptions
try:
    r = Configuration.getRedisVendorConnection()
except:
    sys.exit(1)


# for key in r.scan_iter():
#        print (key)

#1kxun
#qianxun_yingshi

# Redis db 10 (cpe)
# Redis db 11 (notification)

def vendors(): #vraca sve vendore
    return r.sunion('o', 'a', 'h') #r.sunion('t:/a', 't:/h', 't:/o')

def vendor_products(vendor): #vraca sve proizvode od vendora
    allproduct = []
    products = r.smembers('v:' + vendor)
    for product in products:
        allproduct.append(product)
    return allproduct


#print(vendor_products("muslim_matrimonial_script_project"))

def product_versions(product): #vraca verzije po proizvodu
    allversion = []
    versions = r.smembers('p:' + product)
    for version in versions:
        allversion.append(version)
    return allversion



def get_vendor(product): #vraca vendora po proizvodu
    result = []
    allvendors = r.sunion('t:/a', 't:/h', 't:/o')
    for vendor in allvendors:
        if product in vendor_products(vendor):
            result.append(vendor)
    return result


def sortedVersionsOfProduct(product): #vraca sortirano
  p = r.smembers("p:" + product)
  return sorted(list(p))



def search_vendor(search): #trazi odredenog vendora
    result = []
    for vendor in vendors():
        if search in vendor:
            result.append(vendor)
    return result


def search_product(search): #trazi odreden proizvod
    result = []
    for vendor in vendors():
        for product in vendor_products(vendor):
            if search in product:
                result.append(product)
    return result


def search_vendor_product(search, vendor): #trazi odred proizvod kod odred vendora
    result = []
    for product in vendor_products(vendor):
        if search in product:
            result.append(product)
    return result



def sortedBrowseList(vendor):
  result = {}
  if (vendor is None) or type(vendor) == list:
    v1 = r.smembers("t:/o")
    v2 = r.smembers("t:/a")
    v3 = r.smembers("t:/h")

    vendor = sorted(list(set(list(v1) + list(v2) + list(v3))))

    cpe = None
  else:
    cpenum = r.scard("v:" + vendor)
    if cpenum < 1:
      return None
    p = r.smembers("v:" + vendor)
    cpe = sorted(list(p))
    
  result["vendor"] = vendor
  result["product"] = cpe

  return result


print(len(list(vendors())))

