#!/usr/bin/env python3

import os
import sys

#runPath = os.getcwd() #radni direktorij
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, "..")) #dodaj parent dir u PATH varijablu

from redis import exceptions as redisExceptions

from lib.Config import Configuration
from lib.Toolkit import pad
import lib.DatabaseLayer as data #cve-search lib za rad s bazom

import sbin.ncert_get as nget
from sbin.ncert_db2 import search4Mail as ndb #pretrazivanje baze usera

from datetime import date, datetime, timedelta
#import pandas as pd
from dateutil.relativedelta import relativedelta

#d = datetime(2018,12,26)
#d = datetime(2018,11,17)
#x = d - relativedelta(days=1)
#end=datetime(2018, 12, 30)
#end=datetime(2018,11,18)
#za later: dan prije
last_days_dict=nget.getCVEolder(datetime.now() - timedelta(days=1))
#last_days_dict=nget.getCVEolder(datetime(2018,10,24))
#print(last_days_dict)
#print(datetime.now() - timedelta(days=3))
#last_days_dict=nget.getCVEolder(x,end)

#print(type(datetime.now() - timedelta(days=1)))
#print(type(datetime(2018,10,24)))

#print((last_days_dict))

#exit(1)

#df=pd.DataFrame(last_days_dict)

#last_days_dict=nget.getCVEolder(datetime(2018, 10, 24)) #vuce od 19. nadalje sto ima

#print(last_days_dict)

#last_days_dict=nget.getCVEolder(datetime(2017, 12, 19)) #datum i nadalje

# {'version': ['1.0', '2.0', '3.0'], 
#'summary': 'Directory traversal vulnerability in Matt Wright FormHandler.cgi script allows remote attackers to read arbitrary files via (1)
# a .. (dot dot) in the reply_message_attach attachment parameter, or (2) by specifying the filename as a template.'
#, 'cvss': '5.0', 'id': 'CVE-1999-1050', 
#'vendor': ['matt_wright', 'matt_wright', 'matt_wright'], 'product': ['formhandler.cgi', 'formhandler.cgi', 'formhandler.cgi']}#

##########################################
#improve; usporedba vpv kombinacija s vpv kombinacijama u user bazi
cves_rez=[]
mail_rez=[]
vend_rez=[]
prod_rez=[]
#print(last_days_dict[:50])

for i in last_days_dict:
	if "vendor" in i:

		
# 		print(len(i["vendor"]))
		for j in zip(i["vendor"],i["product"]):
			#print (j,i["cvss"], i["id"]) #vpv kombinacije dana

			if ndb(j[0],None,None):				
				cves_rez.append(i["id"])
				mails=ndb(j[0],None,None)	
				mail_rez.append(mails)
				# print(mails)
				#print(j[0],None,None,i["id"])
				vend_rez.append(j[0])
				prod_rez.append(j[1])

			if ndb(j[0],j[1],None):					
				cves_rez.append(i["id"])
				mails=ndb(j[0],j[1],None)
				#print(mails)
				#print(j[0],j[1],None,i["id"])
				mail_rez.append(mails)
				vend_rez.append(j[0])
				prod_rez.append(j[1])

			if ndb(j[0],j[1],float((i["cvss"]))):				
				cves_rez.append(i["id"])
				mails=ndb(j[0],j[1],float((i["cvss"])))
				# print(mails)
				#print(j[0],j[1],i["cvss"],i["id"])
				mail_rez.append(mails)
				vend_rez.append(j[0])
				prod_rez.append(j[1])

			if ndb(j[0],None,float(i["cvss"])):			
				#print(j[0],None,i["cvss"],i["id"])
				cves_rez.append(i["id"])
				mails=ndb(j[0],None,float(i["cvss"]))
				#print(mails)
				mail_rez.append(mails)
				vend_rez.append(j[0])
				prod_rez.append(j[1])


#stavit u dict id-mail parove radi lakse manipulacije
idd=[]
posta=[]
vendd=[]
prodd=[]

for k in zip(cves_rez,mail_rez,vend_rez,prod_rez):
 
    for i in k[1]: 
        idd.append(k[0])
        posta.append(i["mail"])
        vendd.append(k[2])
        prodd.append(k[3])



slist=list(zip(idd,posta,vendd,prodd))
#print(slist)
polja=["id","mail","vendor","product"]
rjecnik=[dict(zip(polja, d)) for d in slist]

distinct_mail=set(posta)
#print(distinct_mail)

def remove_duplicate(rjecnik):#ukloni iste kombinacije mail-cve

	dupl = set()
	new_l = []
	for d in rjecnik:
		t = tuple(d.items())
		if t not in dupl:
			dupl.add(t)
			new_l.append(d)
	return (new_l)


final=remove_duplicate(rjecnik) 
# print(final)


def removeCVEDifferentProducts(differ):
	new_l=[]
	extraprod=[]
	for d in differ:
		if d["mail"] and d["id"] and d["vendor"]:
			extraprod.append(d["product"])
	print(extraprod)


# print(removeCVEDifferentProducts(final))






#not usable anymore/adapt later if neccessary
#############################################

def cvesForCPE(cpe):
  if not cpe: return []
  return sanitize(colCVE.find({"vulnerable_configuration": {"$regex": cpe}}).sort("Modified", -1))

def getCPEs():
  return sanitize(colCPE.find())

#######################

# import ncert_redis as red

# def cvesForCPE(cpe):
#   if not cpe: return []
#   return sanitize(colCVE.find({"vulnerable_configuration": {"$regex": cpe}}).sort("Modified", -1))

# def getCPEs():
#   return sanitize(colCPE.find())


# def getPublished(item):
    
#     return(item['Published'])
    
# def getCVSS(item):
	
# 	return (item['cvss'])

# def getSummary(item):
# 	return(item['summary'])


# def getCVE_id(item):
#     return(item['id'])



# vSearch= "qianxun_yingshi"#"1kxun"
# last_ndays = 3000

# def lastf(search,last_ndays):
# 	for item in cvesForCPE(search):

		
# 		if not last_ndays:
# 			print("Nema")
# 		else:

# 			date_n_days_ago = datetime.now() - timedelta(days=last_ndays)

# 			if item['Published'] > date_n_days_ago:
# 				print(getPublished(item))
# 				print(getCVSS(item))
# 				print(getSummary(item))
# 				print(getCVE_id(item))





#######################

# import ncert_redis as red


###########################################


# #prema vendoru
# def list_vendors(): #lists vendora
# 	result = [i['vendor'] for i in last_days_dict]

# list_vendors()


# def list_products(last_days_dict): #lists prod
#     result = [i['product'] for i in last_days_dict]
#     return result


# def returnvendorinfo(vendorname):
      
#     rez = [i for i in sindex if i[1] == vendorname]
#     return rez

# #print(returnvendorinfo("1kxun"))

# def returnproductbyvendor(vendorname):
#     ven=returnvendorinfo(vendorname)
#     rez=[i[2:4] for i in ven]
#     return rez

# #print(returnproductbyvendor("1kxun"))


# def returnversionbyvendor(vendorname):
#     pro=returnproductbyvendor(vendorname)
#     rez=[i[1] for i in pro]
#     return rez

# #print(returnversionbyvendor("1kxun"))

# def returnproductinfo(productname):
#     rez = [i for i in sindex if i[2] == productname]
#     return rez

# def returnversionbyproduct(productname):
#     pro=returnproductinfo(productname)
#     rez=[i[3] for i in pro]
#     return rez

# #print(returnversionbyproduct("qianxun_yingshi"))




# ###################

# def search_vendor(search): #pretrazuje vendora
#     result = []
#     for vendor in vendors:
#         if search in vendor:
#             result.append(vendor)
#     return result
# #print(search_vendor("cisco"))





# def search_vendor_product(vendorname): #pretrazuje product po vendoru
#     allproduct = []
#     for v,p in zip(vendors, products):
#         if v==vendorname:
#             allproduct.append(p)
#     return allproduct

# #print(search_vendor_product("2glux"))


# def product_versions(productname): #pretrazuje version prema productu
#     allproduct = []
#     for v,p,ve in zip(vendors, products, versions):
#         if p==productname:
#             allproduct.append(ve)
#     return allproduct

#print(search_vendor_product("1kxun"))
##prema productu

# def search_product(search): 
#     result = []
#     for product in products:
#         if search in product:
#             result.append(product)
#     return result


# def vend_first(letter):
#     total = []
#     for word in vendors:
#         if ( word.startswith(letter) ):
#             total.append(word)
#     return total

# def get_vendor(productname): #pretrazuje product i vraca vendora
#     result = []
#     for v,p in zip(vendors, products):
#         if p==productname:
#             result.append(v)
#     return result






