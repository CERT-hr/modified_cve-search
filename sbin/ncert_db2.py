#!/usr/bin/env python3

import os
import sys

runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, "..")) #dodaj parent dir u PATH varijablu

from redis import exceptions as redisExceptions

from lib.Config import Configuration
from lib.Toolkit import pad
import lib.DatabaseLayer as data #cve-search lib za rad s bazom
from datetime import date, datetime, timedelta

from pymongo import MongoClient

#from bson.objectid import ObjectId
import time

client = MongoClient()
client = MongoClient('localhost', 27017) #client = MongoClient('mongodb://localhost:27017/')

#cvss;
db = client.users2
collection = db.notif
#dodano za usere jer je db pun neispravnih podataka

#old:
#db = client.users
#collection = db.notification
#print(db.collection_names(include_system_collections=False))

# db2=client.users3
# collection3=db.realnotif





########################################

def getInfo(mail):  #pronadi usera(mail)
  return collection.find_one({"mail": mail},{"mail":1,"choice.product":1, "choice.vendor":1, "choice.cvss":1,"_id":0})

  #has to be active
#  return collection.find_one({"mail": mail, "choice.status":'true'},{"mail":1,"choice.product":1, "choice.vendor":1, "choice.cvss":1,"_id":0})

#print(getInfo('hpioker@carnet.hr'))

def getInfoVendor1(vendorname, productname,cvss):  #pronadi usera(mail)
  return collection.find({"choice": {"$elemMatch": {"vendor":vendorname,"product":productname,"cvss": {'$lte': cvss}}  }},{"mail":1,"_id":0})#,"choice":1}) #maknut choice/samo check

#  return collection.find({"choice": {"$elemMatch": {"vendor":vendorname,"product":productname,"cvss":{'$lte':cvss},"status":'true'}}},{"mail":1,"_id":0})

#print(getInfoVendor1('hpioker@carnet.hr'))

#for i in getInfoVendor1("cisco","expressway_software",10.0):
#	print(i)

#print(dir(getInfoVendor1("cisco","expressway_software",None)))
#exit()

def search4Mail(vendorname, productname=None, cvss=None):##check scenarije,vrati mailove, kombinacije rijesene u ncert_checku
	rez=[]
	if collection.find({"choice": {"$elemMatch": {"vendor":vendorname,"product":productname,"cvss": {'$lte': cvss}}}}):	
		for i in getInfoVendor1(vendorname, productname,cvss):
			rez.append(i)
		return(rez)
	

#print(search4Mail("google"))

# print(search4Mail("phpcollab",None,cvss=8))

# for i in getInfoVendor1("linux","linux_kernel","4.9.34",7):
# 	print (i)

"""{'_id': ObjectId('5a28f8510ddb7d94cb0ee389'), 'choice': [{'version': None, 'product': 'pro3', 'vendor': '3par'}, {'vendor': '1kxun'}, 
{'version': None, 'product': 'pro2', 'vendor': '3par'}, {'version': 'ver', 'product': 'pro', 'vendor': 'ven3'}, {'version': 'ver1', 'product': 'pro1', 'vendor': '3par'}, 
{'version': 'ver2', 'product': 'pro1', 'vendor': '3par'}, {'version': None, 'product': None, 'vendor': '3par'}], 'mail': 'veddundek@gmail.com'}
"""
#print(getInfo("veddundek@gmail.com"))
#print(collection)
######################################
#stats
def getNumberofVendors(mail):
	x=getInfo(mail)
#	print(x)

#	if x is not None:
	return(len(list(filter(lambda x: x.get('vendor') , x["choice"]))))
#	else:
#		return None

#print(getNumberofVendors("hpioker@carnet.hr"))

def getNumberofProducts(mail): #ne cita null
	x=getInfo(mail)
	return(len(list(filter(lambda x: x.get('product') , x["choice"]))))

def getNumberofVersions(mail): 
	x=getInfo(mail)
	return(len(list(filter(lambda x: x.get('version') , x["choice"]))))

def getNumberofRVendors(mail, vendorname):
	x=getInfo(mail)
	return(len(list(filter(lambda x: x.get('vendor')==vendorname , x["choice"]))))

def getNumberofUsers():

	cursor = collection.distinct("_id")

	count = len(cursor)
	return count

#	cursor = collection.find({})
	#get unique user ids so we can count them
#	distinct_id = []
#	for c in cursor:
#		if c["_id"] not in distinct_id:
#			distinct_id.append(c["_id"])
#	return len(distinct_id)

def getNumberofNewUsers():

        cursor = list(collection.find())
       # print(cursor)
        size = len(cursor)
        this_months_subs = []

	#get current month
        month = datetime.now().month

	#add leading zero to months < 10
        if month < 10:
            month = "0" + str(month)
	#get current year
        year = str(datetime.now().year)

        for i in range(size):
	    #get rows month and year
            row_month = datetime.fromtimestamp(cursor[i]['created_at']).strftime("%Y-%m")
           # print(row_month)
            compare_period = str(year) + "-" + str(month)
	    #if rows month and year matches current month and year it means they are new rows
            if (row_month == compare_period):
                this_months_subs.append(datetime.fromtimestamp(cursor[i]['created_at']).strftime("%Y-%m-%d"))
	#count new rows for this month
        return len(this_months_subs)

#print(getNumberofProducts("aa@gm.com"))

#print(getNumberofVendors("hpioker@carnet.hr"))

#print(getNumberofUsers())
#print(getNumberofNewUsers())

######################################


def removeMail(mail):
	collection.remove({"mail":mail})

# removeMail("marijo.plepelic@carnet.hr")
# removeMail("danijel.kozinovic@carnet.hr")
# removeMail("vdundek@cert.hr")
# removeMail("veddundek@gmail.com")
# removeMail("veddundek1@gmail.com")
def removeVendor(mail, vendor, product=None, cvss=None): #remove unos s odredenim vendorom
	if getNumberofVendors(mail)==1:
		removeMail(mail)
	else:
		collection.update({'mail':mail},{"$pull": {"choice":{"vendor":vendor}}})

# removeVendor("veddundek@gmail.com","linux")
# removeVendor("veddundek@gmail.com","webglimpse")
# removeVendor("vdundek@cert.hr","phpcollab")
#removeVendor("vdundek@carnet.hr","pivotal_software")


def removeCVSS(mail, vendor, product):#makni unos s vpv kombinacijom
  collection.update({'mail':mail},{"$pull": {"choice":{"vendor":vendor,"product":product}}})

#removeCVSS("veddundek1@gmail.com","ibm","test","ver",7)
#########################################

def removeChoice(mail, vendor, product):#makni unos s vpv kombinacijom
  collection.update({'mail':mail},{"$pull": {"choice":{"vendor":vendor,"product":product}}})

def setupUnconfirmToken(mail, vendor, product, unconfirm_token): #update verztije po vendoru, productu
  collection.update({'mail': mail,"choice": {"$elemMatch": {"vendor":vendor,"product":product}}}, {"$set": {"choice.$.unconfirm_token": unconfirm_token}})



def updateNotif(mail, vendor, product=None, cvss=None): #update user info
  # collection.update({'mail': mail}, {'$addToSet': {'choice':[{"version":version, "product":product,"vendor" :vendor}]}})
  collection.update({'mail': mail}, {'$addToSet': {'choice': {"$each": [{"product":product,"vendor" :vendor,"cvss":cvss,"created_at":time.time()}]}}})

##add and update users
def addNotif(mail, vendor, product=None,cvss=None): #dodavanje usera s odabirom  
  entry = {'choice':[{"vendor":vendor,"product":product,"cvss":cvss}],'mail':mail}
  collection.insert(entry)

def addNotif2(mail, vendor, token, status, product=None, cvss=None): #dodavanje usera s odabirom
  entry = {'choice':[{"vendor":vendor,"product":product,"cvss":cvss,'token':token,'activated':status,'created_at':time.time()}],'mail':mail, 'created_at':time.time()}
  collection.insert(entry)


#addNotif("veddundek@gmail.com", "microsoft",cvss=8) #$addToSet #each https://docs.mongodb.com/manual/reference/operator/update/each/
#addNotif("hsdasdasd.h@gmail.com", "microsoft", "12345", False, cvss=8) #$addToSet #each https://docs.mongodb.com/manual/reference/operator/update/each/

#def updateNotifsetc(mail, vendor, product,cvss=None): #update verztije po vendoru, productu
def updateNotifsetc(mail, vendor, product,cvss=None): #update verztije po vendoru, productu
  collection.update({'mail': mail,"choice": {"$elemMatch": {"vendor":vendor,"product":product}}}, {"$set": {"choice.$.cvss": cvss}})

#  collection.update({'mail': mail,"choice": {"$elemMatch": {"product":product}}}, {"$set": {"choice.$.token": token}})


#def updateNotifsetp(mail, vendor, product,cvss=None): #update verztije po vendoru, productu
def updateNotifsetp(mail, vendor, product,cvss=None): #update verztije po vendoru, productu
  collection.update({'mail': mail,"choice": {"$elemMatch": {"vendor":vendor,"product":product }}}, {"$set": {"choice.$.version": version}})

 # collection.update({'mail': mail,"choice": {"$elemMatch": {"product":product}}}, {"$set": {"choice.$.token": token}})

#def updateToken(mail, product, token):
#  collection.update({'mail': mail,"choice": {"$elemMatch": {"product":product}}}, {"$set": {"choice.$.token": token}})
#  print("token")

def updateNotifsetv(mail, vendor, product=None,cvss=None): #update producta po vendoru
  collection.update({'mail': mail,"choice": {"$elemMatch": {"vendor":vendor}}}, {"$set": {"choice.$.product": product}})

#  collection.update({'mail': mail,"choice": {"$elemMatch": {"product":product}}}, {"$set": {"choice.$.token": token}})

def updateData(mail, vendor, token, product=None):
  #add token to new entry
  collection.update({'mail': mail,"choice": {"$elemMatch": {"vendor":vendor, "product":product}}}, {"$set": {"choice.$.token": token}})

#  collection.update({'mail': mail,"choice.vendor":vendor, "choice.product":product}, {"$set": {"choice.$.token": token}})

  #add status to new entry
  collection.update({'mail': mail,"choice": {"$elemMatch": {"vendor":vendor, "product":product}}}, {"$set": {"choice.$.activated": 'false'}})

#  collection.update({'mail': mail,"choice.vendor":vendor, "choice.product":product}, {"$set": {"choice.$.status": 'false'}})


#  db.notif.update({'mail': 'hpioker@carnet.hr',"choice": {"$elemMatch": {"vendor":'l3t'}}}, {"$set": {"choice.$.product": 'kov', "token":'tok'}})

#  exit()
#  entry = {'choice':[{'token':token,'status':status}],'mail':mail}
#  collection.insert(entry)
#  collection.update({"choice": {"$elemMatch": {"mail":mail}}}, {"$set": {"choice.$.status": False}})



#collection.update({"mail":"ae@gm.com","choice":{"$elemMatch": {"vendor":"ven","$or":[{"product":"pro"},{"product":None}] }}}, {"$set": {"choice.$.version": "ver"}}  )

def checkEmail(mail):
  if collection.find_one({"mail":mail}):
    return True
  else:
    return False

def addMail(mail,vendor,token,status,product=None,cvss=None):#dodavanje korisnika/vpv komb u user bazu
#def addMail(mail,vendor, product=None,cvss=None):#dodavanje korisnika/vpv komb u user bazu
	
		if not collection.find_one({"mail":mail}):
#			addNotif(mail, vendor, product,cvss)

			addNotif2(mail, vendor, token, status, product, cvss)

			print("kreira novog usera")
		elif not collection.find_one({"mail":mail}) or getNumberofVendors(mail)>=10:
			print("no more,max ")
		else:
			if collection.find_one({"mail":mail,"choice": {"$elemMatch": {"vendor":vendor,"product":product,"cvss":cvss }}}):
				print("no duplicate VPV")
			elif collection.find_one({"mail":mail,"choice": {"$elemMatch": {"vendor":vendor,"product":product }}}):
				if collection.find_one({"mail":mail,"choice": {"$elemMatch": {"vendor":vendor,"product":product,"cvss":None }}}):
					updateNotifsetc(mail, vendor, product,cvss)
					updateData(mail, vendor, token,product)
					print("update none od cvssa")
				else:
					removeCVSS(mail, vendor, product)
					updateNotif(mail, vendor, product,cvss)
					updateData(mail, vendor, token,product)
					print("create new s drugim cvss/brise se stari cvss")
			elif collection.find_one({"mail":mail,"choice": {"$elemMatch": {"vendor":vendor}}}):
				if collection.find_one({"mail":mail,"choice": {"$elemMatch": {"vendor":vendor,"product":None }}}):
					updateNotifsetv(mail, vendor, product,cvss)
					updateData(mail, vendor, token,product)
					print("update none od producta")
				else:
					print("create new s drugim proizvodom")
					updateNotif(mail, vendor, product,cvss)
					updateData(mail, vendor, token,product)
			else:
				updateNotif(mail, vendor, product,cvss)
				updateData(mail, vendor, token,product)
				print("stvori novog vendora pod postojecim mailom")

#addMail("hh@h.hr","microsoft","1234123",False)
#addMail("veddundek@gmail.com","lenovo")
#addMail("veddundek@gmail.com","u-project")
# addMail("veddundek1@gmail.com","ibm")
#addMail("vdundek@carnet.hr","google","chrome")
# addMail("vdundek@carnet.hr","linux")
# addMail("vdundek@cert.hr","cisco")
#addMail("hpioker@carnet.hr","microsoft1", "token7","true")
#addMail("hpioker@carnet.hr","microsoft", "1.0","true","window")
#addMail("rkacera@carnet.hr","cisco","","")

# addMail("veddundek@gmail.com","apple",cvss=5.5)

# addMail("vdundek@cert.hr","apple",cvss=5.7)

# addMail("vdundek@cert.hr","phpcollab",cvss=6)

# addMail("veddundek@gmail.com","phpcollab",cvss=6.5)

# addMail("vdundek@carnet.hr","phpcollab","phpcollab")
# addMail("marijo.plepelic@carnet.hr","microsoft","windows_10")
#addMail("vdundek@carnet.hr","cisco")

#addMail("danijel.kozinovic@carnet.hr","microsoft")

#"qianxun_yingshi"#"1kxun"
#print(db.notifications.find({"choice.vendor":{"$in":["3par"]}}))

#db.notification.find({"mail":"aa@gm.com","choice.$.product":{"$exists":"true"}}).pretty()


###################################################


def getvendorsfromusers(mail): #vrati vendore koje zeli user, za unsubscribe i guess
  info=getInfo(mail)
  num=getNumberofVendors(mail)
  rez=[]
  for i in range(0,num):
  	rez.append((info["choice"][i]["vendor"]))
  return rez

# print(getvendorsfromusers("veddundek@gmail.com"))



###############
today=datetime.now() - timedelta(days=1)

exp = datetime.now() - timedelta(days=1)



# import uuid
# def generateToken(mail):
#   token = uuid.uuid4().hex
#   collection.update({'mail': mail}, {'$set': {'token': token,"expires":exp}})
#   return token

# # print(generateToken("vdundek@cert.hr"))

# def deleteExpired(mail):
# 	if collection.find({"$elemMatch": {"expires": {'$gte': new Date("2018-06-17T10:03:46Z")}}  },{"mail":1,"_id":0}):
# 		print("d")

# deleteExpired("vdundek@cert.hr")

def getUserData(token):  #pronadi usera(mail)

#  return collection.find_one({"choice": {"$elemMatch": {"token":token}}})

#  return collection.find_one({"choice.token": token},{ "choice.$": 1})

#  return collection.find_one({"choice.token": token},{"mail":1, "choice.product":1, "choice.vendor":1, "_id":0, "choice.token":1, "choice.activated":1})

  pipeline = [{"$unwind": "$choice"},{"$match": {"choice.token": token}},{"$project":{"_id":0, "choice":1}}]

  return list(collection.aggregate(pipeline))

#  return collection.find_one({"token": token},{"mail":1})
#  return collection.find_one({"token": token},{"mail":1,"status":2,"token":3})

def getUnsubChoiceList(unconfirm_token):
  pipeline = [{"$unwind": "$choice"},{"$match": {"choice.unconfirm_token": unconfirm_token}},{"$project":{"_id":0, "choice":1}}]

  return list(collection.aggregate(pipeline))



def updateUserData(token):

  collection.update({"choice": {"$elemMatch": {"token":token}}}, {"$set": {"choice.$.activated": 'true'}})

def updateUserData2(token,vendor, product):

  collection.update({"choice.token":token, "choice.vendor":vendor, "choice.product":product},{"$set":{"choice.$.activated":'true'}})

#  collection.update({'token': token, "choice": {"$set": {"choice.$.status":True}}})

#  collection.update({'mail': mail,"choice": {"$elemMatch": {"vendor":vendor}}}, {"$set": {"choice.$.product": product}})
