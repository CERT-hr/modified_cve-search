#!/usr/bin/env python3

import os
import sys

#runPath = os.getcwd() #radni direktorij
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, "..")) #dodaj parent dir u PATH varijablu

from redis import exceptions as redisExceptions

from lib.Config import Configuration
from lib.Toolkit import pad
import lib.DatabaseLayer as data #cve-search lib za rad s bazom
from datetime import date, datetime, timedelta,time
import sbin.ncert_check2 as check

import csv

#########################   
import smtplib
import jinja2
from email.mime.text import MIMEText
from jinja2 import Template
from sbin.ncert_db2 import search4Mail as ndb
from sbin.ncert_db2 import getInfo as getPopis
from  more_itertools import unique_everseen
from collections import OrderedDict

FROM = 'cve_obavijesti@cert.hr'
TEMPLATE_DIR = runPath

today = date.today()


def body_from_template(template_file, urls, token, today):
    templateLoader = jinja2.FileSystemLoader( searchpath=TEMPLATE_DIR )
    templateEnv = jinja2.Environment( loader=templateLoader )
    template = templateEnv.get_template( template_file )
    return template.render( urls = urls, token=token, today=today)

def send_report(MAIL_LIST,urls,token,template_file,subject):
    body  =  body_from_template(template_file,urls,token,today)
    msg = MIMEText(body,"html")#
    msg.add_header('Content-Type','text/html')
    msg['Subject'] = subject
    msg['From'] = FROM
    msg['To'] = MAIL_LIST
    s = smtplib.SMTP('localhost')
    s.sendmail(FROM, MAIL_LIST, msg.as_string())
    s.quit

def returnCVE(mail,key):
    cvee=[]
    for i in check.final:
        if i["mail"]==mail:
            cvee.append(i[key])
    return cvee

def reReturnCVE(mail,key):
    cvee=[]
    for i in check.final:
        if i["mail"]==mail:
            temp=i[key].replace("_", " ")
            cvee.append(temp)
    return cvee
  

def getValuebyCVE(CVE,key):
    rez= []
    for d in check.last_days_dict:        
        if d["id"]==CVE:
            rez.append(d[key])
            rez=", ".join(str(v) for v in rez)         
    return rez



def returnCVEinfo(mail,key):    
    tk=[]
    for i in check.final:
        if i["mail"]==mail:            
            tk.append(getValuebyCVE(i["id"],key))
    return tk

def groupBy(dict_list, key,key_out):
    
    finalDict = OrderedDict()
    for item in dict_list:

    	polje = item.pop(key_out)
    	polje = item.pop(key)
    	finalDict.setdefault(tuple(item.items()), []).append(polje)
    	
    return [(dict(polje), v) for polje, v in finalDict.items()]

def grupa(dict_list,key,key_out):
    l=[]
    
    y=groupBy(dict_list,key,key_out)
    
    for j,k in y:
        j[key]=k
        l.append(j)        
    return l


def merge_lists(list1, list2, key):
  merged = {}
  for item in list1+list2:
    if item[key] in merged:
      merged[item[key]].update(item)
    else:
      merged[item[key]] = item
  return [val for (_, val) in merged.items()]



for i in check.distinct_mail:    
    print(returnCVE(i,"id"),returnCVEinfo(i,"summary"),returnCVEinfo(i,"cvss"),returnCVE(i,"vendor"),returnCVE(i,"product"))
    print(i)  
    x=list(zip(returnCVE(i,"id"),returnCVEinfo(i,"summary"),returnCVEinfo(i,"cvss"),reReturnCVE(i,"vendor"),reReturnCVE(i,"product")))

    fields=["id","summary","cvss", "vendor","product"]
    dictio=[dict(zip(fields, d)) for d in x]
    dictio2=[dict(zip(fields, d)) for d in x]
    
    print(dictio)
    dict1=grupa(dictio,"product","vendor")
    dict2=grupa(dictio2,"vendor","product")       
	  
    gg=merge_lists(dict1,dict2,"id")
  
    for j in gg:
        j["vendor"]=list(unique_everseen(j["vendor"]))
        j["product"]=list(unique_everseen(j["product"]))
    send_report(i,gg,None,"ncert_template4.html","NCERT - obavijesti o ranjivostima")#test_template.html

def popispretplata(mail):
    inform=getPopis(mail)
    v=[]
    p=[]
    c=[]
    for i in inform["choice"]:
        v.append(i["vendor"])
        p.append(i["product"])
        c.append(i["cvss"])
    rez=zip(v,p,c)
    return (rez)

def sendPopisPretplata(mail):
    send_report(mail,popispretplata(mail),None,"ncert_popis_template.html","NCERT - popis pretplata")

#def sendSubConfLink(mail, token):

#    send_report(mail,None,token,"ncert_conf_mail.html","NCERT - mail potvrde")

#sendSubConfLink("hpioker@carnet.hr")

# sendPopisPretplata("veddundek@gmail.com")
#sendPopisPretplata("hpioker@carnet.hr")

#def sendUnsubscribe
