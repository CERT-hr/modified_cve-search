#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Minimal web interface to cve-search to display the last entries
# and view a specific CVE.
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2013-2018  Alexandre Dulaunoy - a@foo.be
# Copyright (c) 2014-2018  Pieter-Jan Moreels - pieterjan.moreels@gmail.com

# imports
import os
import re
import sys
import urllib
_runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(_runPath, ".."))

from flask import render_template, request, jsonify

import lib.DatabaseLayer as db
import lib.Toolkit       as tk

from lib.Config  import Configuration
from web.api     import API, APIError

import form_class
import sbin.ncert_db2 as ncert_db
#from sbin.ncert_mail4 import sendPopisPreplata as send_subscription_email
import json

import sbin.ncert_redis as redis_query

import smtplib
import jinja2
from email.mime.text import MIMEText
from jinja2 import Template
from datetime import date, datetime, timedelta,time

FROM = 'cve_obavijesti@cert.hr'
TEMPLATE_DIR = _runPath

today = date.today()

class Minimal(API):
  #############
  # Variables #
  #############
  defaultFilters={'timeSelect': 'all',
                  'startDate': '', 'endDate': '', 'timeTypeSelect': 'Modified',
                  'cvssSelect': 'all', 'cvss': '', 'rejectedSelect': 'hide'}
  args = {'pageLength':   Configuration.getPageLength(),
          'listLogin':    Configuration.listLoginRequired(),
          'minimal':      True}

  def __init__(self):
    self.minimal = True
    super().__init__()
    routes = [{'r': '/',                               'm': ['GET'],  'f': self.index},
              {'r': '/',                               'm': ['POST'], 'f': self.index_post},
              {'r': '/r/<int:r>',                      'm': ['GET'],  'f': self.index_filter_get},
              {'r': '/r/<int:r>',                      'm': ['POST'], 'f': self.index_filter_post},
              {'r': '/cve/<cveid>',                    'm': ['GET'],  'f': self.cve},
              {'r': '/cwe',                            'm': ['GET'],  'f': self.cwe},
              {'r': '/cwe/<cweid>',                    'm': ['GET'],  'f': self.relatedCWE},
              {'r': '/capec/<capecid>',                'm': ['GET'],  'f': self.capec},
              {'r': '/browse',                         'm': ['GET'],  'f': self.browse},
              {'r': '/browse/',                        'm': ['GET'],  'f': self.browse},
              {'r': '/browse/<vendor>',                'm': ['GET'],  'f': self.browse},
              {'r': '/search/<vendor>/<path:product>', 'm': ['GET'],  'f': self.search},
              {'r': '/search',                         'm': ['POST'], 'f': self.freetext_search},
              {'r': '/link/<key>/<value>',             'm': ['GET'],  'f': self.link},
	      {'r': '/subscription',                   'm': ['GET'],  'f': self.generate_subscription_form},
	      {'r': '/subscribe',                      'm': ['POST'], 'f': self.save_user_subscription},
	      {'r': '/send-subscription-report/<email>','m': ['GET'], 'f': self.send_subscription_report},
              {'r': '/check_subscription_email/<email>','m': ['GET'], 'f': self.check_subscription_email},
              {'r': '/unsubscribe/<email>',             'm': ['GET'], 'f': self.unsubscribe},
              {'r': '/subscribe/activate/<token>',              'm': ['GET'], 'f': self.sub_conf},
              {'r': '/unsubscribe/activate/<token>',            'm': ['GET'], 'f': self.unsub_conf}]
    filters = [{'n': 'htmlEncode',      'f': self.htmlEncode},
               {'n': 'htmlDecode',      'f': self.htmlDecode},
               {'n': 'sortIntLikeStr',  'f': self.sortIntLikeStr}]
    context_processors = [self.JSON2HTMLTable]
    error_handlers = [{'e': 404, 'f': self.page_not_found}]

    for route   in routes:             self.addRoute(route)
    for _filter in filters:            self.addFilter(_filter)
    for context in context_processors: self.addContextProcessors(context)
    for handler in error_handlers:     self.app.register_error_handler(handler['e'], handler['f'])

  #############
  # Functions #
  #############
  def addFilter(self, _filter):
    self.app.add_template_filter(_filter['f'], _filter['n'])

  def addContextProcessors(self, context_processor):
    self.app.context_processor(context_processor)

  def getFilterSettingsFromPost(self, r):
    filters = dict(request.form)
    filters = {x: filters[x][0] for x in filters.keys()}
    errors  = False
    # retrieving data
    try:
      cve = self.filter_logic(filters, r)
    except Exception as e:
      cve = db.getCVEs(limit=self.args['pageLength'], skip=r)
      errors = True
    return {'filters': filters, 'cve': cve, 'errors': errors}
    return(filters,cve,errors)


  def body_from_template(self,template_file, urls, today):
    templateLoader = jinja2.FileSystemLoader( searchpath=TEMPLATE_DIR )
    templateEnv = jinja2.Environment( loader=templateLoader )
    template = templateEnv.get_template( template_file )
    return template.render( urls = urls, today=today)


  def send_report(self,MAIL_LIST,urls,template_file,subject):
    body  =  self.body_from_template(template_file,urls,today)
    msg = MIMEText(body,"html")#
    msg.add_header('Content-Type','text/html')
    msg['Subject'] = subject
    msg['From'] = FROM
    msg['To'] = MAIL_LIST
    s = smtplib.SMTP('localhost')
    s.sendmail(FROM, MAIL_LIST, msg.as_string())
    s.quit

  def popispretplata(self,mail):
    inform=ncert_db.getInfo(mail)
    v=[]
    p=[]
    c=[]
    for i in inform["choice"]:
        v.append(i["vendor"])
        p.append(i["product"])
        c.append(i["cvss"])
    rez=zip(v,p,c)
    return (rez)


  def sendPopisPretplata(self,mail):
    self.send_report(mail, self.popispretplata(mail),"ncert_popis_template.html","NCERT - popis pretplata")

  ##########
  # ROUTES #
  ##########
  # /
  def index(self):
    cve = self.filter_logic(self.defaultFilters, 0)
    message = None
    return render_template('index.html', cve=cve, message=message, r=0, **self.args)

  # /
  def index_post(self):
    args = dict(self.getFilterSettingsFromPost(0), **self.args)
    message = None
    return render_template('index.html', message=message, r=0, **args)

  # /r/<r>
  def index_filter_get(self, r):
    if not r or r < 0: r = 0
    cve = self.filter_logic(self.defaultFilters, r)
    message = None
    return render_template('index.html', cve=cve, message=message, r=r, **self.args)

  # /r/<r>
  def index_filter_post(self, r):
    if not r or r < 0: r = 0
    args = dict(self.getFilterSettingsFromPost(r), **self.args)
    message = None
    return render_template('index.html', message=message, r=r, **args)

  # /cve/<cveid>
  def cve(self, cveid):
    cve = self.api_cve(cveid)
    if not cve:
      return render_template('error.html',status={'except':'cve-not-found','info':{'cve':cveid}},minimal=self.minimal)
    return render_template('cve.html', cve=cve, minimal=self.minimal)

  # /cwe
  def cwe(self):
    cwes=[x for x in self.api_cwe() if x["weaknessabs"].lower()=="class"]
    return render_template('cwe.html', cwes=cwes, capec=None, minimal=self.minimal)

  # /cwe/<cweid>
  def relatedCWE(self, cweid):
    cwes={x["id"]: x["name"] for x in self.api_cwe()}
    return render_template('cwe.html', cwes=cwes, cwe=cweid, capec=db.getCAPECFor(cweid), minimal=self.minimal)

  # /capec/<capecid>
  def capec(self, capecid):
    cwes={x["id"]: x["name"] for x in self.api_cwe()}
    return render_template('capec.html', cwes=cwes, capec=db.getCAPEC(capecid), minimal=self.minimal)

  # /browse
  # /browse/
  # /browse/<vendor>
  def browse(self, vendor=None):
    try:
      data = self.api_browse(vendor)
      if 'product' in data and 'vendor' in data:
       return render_template('browse.html', product=data["product"], vendor=data["vendor"], minimal=self.minimal)
      else:
       return render_template('error.html', minimal=self.minimal, status={'except':'browse_exception', 'info': 'No CPE'})
    except APIError as e:
      return render_template('error.html', minimal=self.minimal, status={'except':'browse_exception', 'info':e.message})

  # /search/<vendor>/<product>
  def search(self, vendor=None, product=None):
    search = vendor + ":" + product
    cve = db.cvesForCPE(search)
    return render_template('search.html', vendor=vendor, product=product, cve=cve, minimal=self.minimal)

  # /search
  def freetext_search(self):
    search = request.form.get('search')
    result = db.getSearchResults(search)
    cve=result['data']
    errors=result['errors'] if 'errors' in result else []
    return render_template('search.html', cve=cve, errors=errors, minimal=self.minimal)

  # /link/<key>/<value>
  def link(self, key=None,value=None):
    key=self.htmlDecode(key)
    value=self.htmlDecode(value)
    regex = re.compile(re.escape(value), re.I)
    cve=db.via4Linked(key, regex)
    cvssList=[float(x['cvss']) for x in cve if x.get('cvss')]
    if cvssList:
        stats={'maxCVSS': max(cvssList), 'minCVSS': min(cvssList),'count':len(cve)}
    else:
        stats={'maxCVSS': 0, 'minCVSS': 0, 'count':len(cve)}
    return render_template('linked.html', via4map=key.split(".")[0], field='.'.join(key.split(".")[1:]),
                           value=value, cve=cve, stats=stats, minimal=self.minimal)

  # /subscription
  def generate_subscription_form(self):
    #search = request.form.get('search')
    #result = db.getSearchResults(search)
    #cve=result['data']
    #errors=result['errors'] if 'errors' in result else []
    message = None

    subscription_form = form_class.SubscriptionForm()
    return render_template('subscription.html', form=subscription_form, subscription_data=request, message=message, minimal=self.minimal)

  def save_user_subscription(self):
    data = request.form
    subscription_form = form_class.SubscriptionForm()
    if data["email"]=="":
        error = "Molimo unesite e-mail adresu."
        return render_template('subscription.html', form=subscription_form,  message=error, r=0, **self.args)

    if not re.match(r"^[\w\.\+\-]+\@[\w]+\.[a-z]{2,3}$", data["email"]):
        error = "Neispravan format e-mail adrese."
        return render_template('subscription.html',form=subscription_form,  message=error, r=0, **self.args)

    #check user status
    

    #return data
    for i in range(0, int(data["vendor-product-number"])):
        if data["vpc-" + str(i) + "-vendorField"] not in redis_query.vendors():
            error = "Uneseni proizvođač ne postoji."
            return render_template('subscription.html',form=subscription_form,  message=error, r=0, **self.args)
        if data["vpc-" + str(i) + "-productField"] != "":
            if data["vpc-" + str(i) + "-productField"] not in redis_query.vendor_products(data["vpc-" + str(i) + "-vendorField"]):
                error = "Proizvod " + data["vpc-" + str(i) + "-productField"] + " ne odgovara proizvođaču " + data["vpc-" + str(i) + "-vendorField"] + "."
                return render_template('subscription.html',form=subscription_form,  message=error, r=0, **self.args)
        selected_product = None
        selected_cvss = None

        if data["vpc-" + str(i) + "-productField"] != "":
            print("hello")
            selected_product = data["vpc-" + str(i) + "-productField"] 

#            print(data["vpc-" + str(i) + "-productField"])

        if data["vpc-" + str(i) + "-cvssField"] != "":
            selected_cvss = data["vpc-" + str(i) + "-cvssField"]

        ncert_db.addMail(data["email"], data["vpc-" + str(i) + "-vendorField"], selected_product, selected_cvss)
    subscription_form = form_class.SubscriptionForm()
    cve = self.filter_logic(self.defaultFilters, 0)
    message = "Uspješno ste se preplatili na zadane liste ranjivosti proizvođača i proizvoda"
    return render_template('index.html', cve=cve, message=message, r=0, **self.args)

  def check_subscription_email(self, email):
    existed_email = ncert_db.checkEmail(email)
    return json.dumps({"email_existed": existed_email})

  def send_subscription_report(self, email):
    self.sendPopisPretplata(email)
    return json.dumps({"email_sent": True})

  def unsubscribe(self, email):
    ncert_db.removeMail(email)
    return json.dumps({"email_deleted": True})

  def sub_conf(self, token):
    print("Hello")
#     self.sendSubConfLink(email)

  def unsub_conf(self, token):
    self.sendSubConfLink(email)

  ###########
  # Filters #
  ###########
  def htmlEncode(self, string):
    return urllib.parse.quote_plus(string).lower()
 
  def htmlDecode(self, string):
    return urllib.parse.unquote_plus(string)

  def sortIntLikeStr(self, datalist):
    return sorted(datalist, key=lambda k: int(k))

  def JSON2HTMLTable(self):
    # Doublequote, because we have to |safe the content for the tags
    def doublequote(data):
      return urllib.parse.quote_plus(urllib.parse.quote_plus(data))

    def JSON2HTMLTableFilter(data, stack = None):
      _return = ""
      if type(stack) == str: stack = [stack]

      if   type(data) == list:
        if len(data) == 1:
          _return += JSON2HTMLTableFilter(data[0], stack)
        else:
          _return += '<ul class="via4">'
          for item in data:
            _return += ('<li>%s</li>'%JSON2HTMLTableFilter(item, stack))
          _return += '</ul>'
      elif type(data) == dict:
        _return += '<table class="invisiTable">'
        for key, val in sorted(data.items()):
          _return += '<tr><td><b>%s</b></td><td>%s</td></tr>'%(key, JSON2HTMLTableFilter(val, stack+[key])) 
        _return += '</table>'
      elif type(data) == str:
        if stack:
          _return += "<a href='/link/"+doublequote('.'.join(stack))+"/"+doublequote(data)+"'>" #link opening
          _return += "<span class='glyphicon glyphicon-link' aria-hidden='true'></span> </a>"
        _return += "<a target='_blank' href='%s'>%s</a>"%(data, data) if tk.isURL(data) else data
      _return += ""
      return _return
    return dict(JSON2HTMLTable=JSON2HTMLTableFilter)


  ##################
  # Error Messages #
  ##################
  def page_not_found(self, e):
    return render_template('404.html', minimal=self.minimal), 404

if __name__ == '__main__':
  server = Minimal()
  server.start()
