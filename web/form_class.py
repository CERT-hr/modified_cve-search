# WebForms #
from flask_wtf import Form
from wtforms import StringField, SelectField, DecimalField, SubmitField, TextAreaField, FieldList
from wtforms import PasswordField, ValidationError, BooleanField, HiddenField, FormField
from wtforms.validators import DataRequired, Email, Length, Regexp, EqualTo, Optional

import lib.Query as query

class VendorProductCVSSForm(Form):
    #vendor = None
    #vendorList = query.getBrowseList(vendor)
    #productChoices = [(c, c) for c in ['All']]
    productField = StringField(u'Proizvod')
    #vendorChoices = [(c, c) for c in vendorList["vendor"]]
#    vendorField = StringField('Proizvo ^qa ^m', validators = [DataRequired()])
    vendorField = StringField('Proizvo ^qa ^m', validators = [DataRequired()])
    cvssField = DecimalField('CVSS',  validators=[])


class SubscriptionForm(Form):
   # name = StringField('Name',
   #                    validators=[DataRequired(),
   #                                Length(1, 64),
   #                                Regexp('^[A-Za-z][A-Za-z0-9_. ]*$', 0,
   #                                       'Name must have only letters, \
   #                                       numbers, dots or underscores.')])
    email = StringField('Upišite Vašu adresu elektroničke pošte',
                        validators=[DataRequired(),
                                    Email(),
                                    Length(1, 64),
                                    Regexp('^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$', 0,
                                           'Invalid email format.')])
   # password = PasswordField('Password',
   #                          validators=[DataRequired(),
   #                                      EqualTo('password2',
   #                                              message='Passwords must match.'),
   #                                      Length(min=8,
   #                                             message='minimum password length: 8')])
   # password2 = PasswordField('Confirm password', validators=[DataRequired()])
   # affiliation = StringField('Affiliation', validators=[Optional()])
   # pgp = TextAreaField('PGP Key', validators=[Optional()])
    vpc = FieldList(FormField(VendorProductCVSSForm), min_entries=1, max_entries=30)
    submit = SubmitField('Preplata na zadane liste')

    #def validate_email(self, field):
    #    if models.User.query.filter_by(email=field.data).first():
    #        raise ValidationError('Email already registered.')

